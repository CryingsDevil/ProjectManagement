Part1: How I solved the problem of sychronizing your thread;
I create a global structure for students to grab markers.
typedef struct{
    int ID;
    int noEnoughTime;
    int markerGrabbed;
    int finished;
    pthread_cond_t grabbing;
    pthread_cond_t grabbed;
    pthread_cond_t markerIn;
    pthread_mutex_t student;
    pthread_mutex_t marker;
}studentGrabing;
When there is no student grabbing markers, the vaule of 'ID' wil be set to -1, which means any student thread can use this global structure to grab markers.
When the structure is being used for grabbing markers, the other students thread which want to grab marker will wait for broadcast, and once the grabbing is finished, mutex condition 'grabbed' will be broadcast and tell other
student that this structure is available.
For marker thread, if the structure is using for grabbing markers, the marker thread will not need to wait. They just try to lock the mutex lock marker and be the marker of the student. 
If the structure is not being used, the marker thread will wait for mutex condition 'grabbing' to wake them up that one new student thread start to grab markers.

This is how I design the grabbing marker part.

Then I create a structure for each student thread. The structure has two mutex locks, two mutex conditions and an integer. 
typedef struct{
    int ID;
    pthread_mutex_t marker;
    pthread_mutex_t student;
    pthread_cond_t demoFinish;
    pthread_cond_t demoBegin;
}students;
The mutex lock 'marker' is used for marker thread to wait for condition broadcast(when student start demo and end demo).

Part2: Why my method is correct

1)There is only one glboal structure, so only one student can grab marker at same time.

2)It is marker's responsibility to add the value of grabbed marker of the student thread, and this opeartion is under the protection of mutex lock, which will ensure that every student thread will grab the correct number marker.

3)It is everyone (student thread, marker thread and run() thread)'s responsibility to check whether the time is still enough for another demo or not. Once the time is not enough every thread will stop their work and exit the room.


Part3: How my method could be improved
The two structure is similar, maybe I can use only one structure instead of two. 
The argument finished in structure studentGrabing is not often used. Maybe I can get rid of this argument. 
